/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


package at.srfg.kmt.ehealth.phrs.security.model;


import java.io.Serializable;
import java.util.Set;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Transient;

/**
 * Generic representation for an user group.
 * A group is a form to relate together users.
 * A group can have none, one or more users.
 *
 * @author Mihai
 */
@Entity
@NamedQueries({
    @NamedQuery(name = "findGroupForName", query = "SELECT g FROM PhrGroup AS g WHERE g.name = :name"),
    @NamedQuery(name = "removeAllGroups", query = "DELETE FROM PhrGroup g"),
    @NamedQuery(name = "removeGroupForName", query = "DELETE FROM PhrGroup g WHERE g.name = :name"),
    @NamedQuery(name = "getAllGroups", query = "SELECT g FROM PhrGroup AS g")
})
public class PhrGroup implements Serializable {

    /**
     * A version number for this class so that serialization
     * can occur without worrying about the underlying class
     * changing between serialization and deserialization.
     */
    private static final long serialVersionUID = 5165L;

    /**
     * Unique id, is generated by the underlying persistence layer.<br>
     * <b>Note : <b> Don't use this property in any kind of logic,
     * this property is used only by the underly persistence layer.
     */
    private Long id;

    /**
     * The group name.
     */
    private String name;

    /**
     * The group description.
     */
    private String description;

    /**
     * All the user members in this group.
     */
    private Set<PhrUser> users;

    /**
     * Builds an Group instance.
     */
    public PhrGroup() {
        // UNIMPLEMEMENTED
    }

    /**
     * Builds an Group instance.
     */
    public PhrGroup(String name) {
        this.name = name;
    }

    /**
     * Returns the description for this Group.
     *
     * @return the description for this Group.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Returns the unique id for this Group instance. <br>
     * <b>Note : <b> Don't use this property in any kind of logic,
     * this property is used only by the underly persistence layer.
     *
     * @return the unique id for this user.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    public Long getId() {
        return id;
    }

    /**
     * Returns the name for this Group.
     *
     * @return the name for this Group.
     */
    public String getName() {
        return name;
    }

    @OneToMany
    public Set<PhrUser> getUsers() {
        return users;
    }

    /**
     * Registers a new description for this Group instance.
     *
     *
     * @param description a new description for this Group instance.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Registers a new unique id for this Group instance.<br>
     * <b>Note : <b> Don't set this property by hand (using this
     * method) and don't use this property any kind of logic.
     * This property is used only by the underly persistence layer.
     *
     * @param id the new unique id.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Registers a new name for this group.
     * @param name the new name for this group.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Replaces the already existent set of users (for this group)
     * with a new set of users.
     *
     * @param users the new set of users.
     * @see #addUsers(java.util.Set)
     * @see #addUser(at.srfg.kmt.ehealth.phrs.security.model.User)
     */
    public void setUsers(Set<PhrUser> users) {
        this.users = users;
    }

    /**
     * Appends the actual set of users with a new set of users.
     *
     * @param users the set of users to be appended.
     * @see #addUser(at.srfg.kmt.ehealth.phrs.security.model.User) 
     * @see #setUsers(java.util.Set) 
     */
    public void addUsers(Set<PhrUser> users) {
        this.users.addAll(users);
    }

    /**
     * Add a singular user  to the actual user set.
     *
     * @param user the user to add.
     * @see #addUsers(java.util.Set)
     * @see #setUsers(java.util.Set)
     */
    public void addUser(PhrUser user) {
        users.add(user);
    }

    public void removeUser(PhrUser user) {
        users.remove(user);
    }

    public void removeUsers(Set<PhrUser> usersToRemote) {
        users.removeAll(usersToRemote);
    }

    @Transient
    public boolean isGroupEmpty() {
        return users == null ? true : users.isEmpty();
    }

    /**
     * Returns a string representation for this Group.
     * The string representation for this Group looks like
     * this :
     * <ul>
     * <li> the String 'Group{name='
     * <li> the name property
     * <li> the String ', description='
     * <li> the description property
     * <li> the String '}'
     * </ul>
     *
     * @return a string representation for this Group.
     */
    @Override
    public String toString() {
        final String result =
                String.format("Group{name=%s, description=%s}", name, description);
        return result;
    }
}
